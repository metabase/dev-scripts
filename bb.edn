{:min-bb-version "0.9.162"
 :paths ["bb"]
 :deps {escherize/bask {:git/url "https://github.com/escherize/bask.git"
                        :git/sha "81cc9af3021d7689cfbddf0518a1e828f785f006"}
        table/table {:mvn/version "0.5.0"}}
 :tasks {:requires [[bask.colors :as c]
                    [bb.cli :as cli]
                    [bb.tasks :as t]
                    [clojure.string :as str]]

         run-branch
         {:requires [[bb.dl-and-run :as dl]]
          :doc "Download and run a jar for a branch, on a port. Respects MB_DB_CONNECTION_URI."
          :examples [["bb run-branch --branch master --port 4445" "Run master branch on port 4445"]
                     ["bb run-branch"                             "Pick branch and port, and run branch on port"]
                     ["bb run-branch -p 9939 -s 9938"             "Pick a branch, and run it on port 4445 with a socket repl on 9938"]]
          :task
          (do (dl/check-gh-token!)
              (dl/download-and-run-latest-jar!
                (let [list-branches (delay ;; choices can be a delay -- we dont want to grab theese unless we need them.
                                      (t/list-branches
                                        (t/env "MB_DIR" (fn []
                                                          (println (c/red "Please put the path of your metabase repository into the MB_DIR env variable like so:"))
                                                          (println (c/white "export MB_DIR=path/to/metabase"))
                                                          (System/exit 1)))))]
                  (cli/menu! (current-task)
                             {:id :branch :msg "What branch should we run?" :short "-b" :long "--branch BRANCH" :choices list-branches :prompt :select}
                             {:id :port :msg "What port should we run it on?" :short "-p" :long "--port PORT" :prompt :number :default 3337}
                             {:id :socket-repl :msg "What port shall we open a socket repl on?" :short "-s" :long "--socket-repl SOCKETPORT"}))))}

         check-branch
         {:requires [[bb.dl-and-run :as dl]]
          :doc "Check the status of a branch in CI."
          :examples [["bb check-branch --branch master" "Check master branch github checks"]]
          :task
          (do (dl/check-gh-token!)
              (let [branch-info (cli/menu! (current-task)
                                           {:id :branch
                                            :msg "What branch should we check?"
                                            :short "-b"
                                            :long "--branch BRANCH"
                                            :choices (delay (t/list-branches (t/mb-env)))
                                            :prompt :select}
                                           {:id :watch?
                                            :msg "Watch until success?"
                                            :short "-w"
                                            :long "--watch"})]
                (if (:watch? branch-info)
                  (loop []
                    (let [check (dl/checks-for-branch branch-info)]
                      (println (str "\n----------[ "
                                    (.format (java.text.SimpleDateFormat. "hh:mm:ss a") (java.util.Date.))
                                    " ]"))
                      (doseq [[s c] check]
                        (println (dl/pretty s) s (str "(" c ") ")))
                      (when-not (= (keys check) [:success])
                        (Thread/sleep 5000)
                        (recur))))
                  (doseq [[s c] (dl/checks-for-branch branch-info)]
                    (println (dl/pretty s) s (str "(" c ") "))))))}

         metabuild
         {:doc "Starts metabase locally in dev mode."
          :requires [[bb.meta :as meta]]
          :task (let [{:keys [app-db user-name password extensions] :as p}
                      (cli/menu! (current-task)
                                 {:id :app-db
                                  :title "Which DB should we use for metabase's data?"
                                  :choices ["postgres" "h2" "mysql"]
                                  :required? true
                                  :short "-d"
                                  :long "--database DB"
                                  :prompt :select}
                                 {:id :user-name :short "-u" :long "--username USER" :default (t/whoami)}
                                 {:id :password :short "-p" :long "--pw PW" :default "password"}
                                 {:id :extensions
                                  :short "-e"
                                  :long "--exensions EXT"
                                  :default ["dev" "ee" "ee-dev" "drivers" "drivers-dev" "cider/nrepl"]
                                  :prompt :multi})]
                  ;; (prn p)
                  (meta/build app-db user-name password extensions))}

         quick-test {:doc "Quickly run a test against a namespace."
                     :requires [[bb.quick-test :as qt]]
                     :task (qt/go!
                             (:test-namespaces (cli/menu! (current-task)
                                                          {:id :test-namespaces
                                                           :msg "What namespace(s) to test?"
                                                           :long "--ns NS"
                                                           :required? true
                                                           :prompt :multi
                                                           :choices (delay (qt/test-nss))})))}

         install-autotab {:doc "Prints shell code to autocomplete tasks using bb.
                        Note: for fish shell please make sure ~/.config/fish/completions exists."
                          :examples [["bb install-autotab --shell bash >> ~/.bashrc" "Bash ^"]
                                     ["bb install-autotab --shell zsh >> ~/.zshrc" "Zsh ^"]
                                     ["bb install-autotab --shell fish >> ~/.config/fish/completions/bb.fish" "Fish ^"]]
                          :task (let [{:keys [shell-type] :as x}
                                      (cli/menu! (current-task)
                                                 {:id :shell-type
                                                  :long "--shell SHELL"
                                                  :required? true
                                                  :title "What kind of shell?"
                                                  :choices ["zsh" "bash" "fish"]
                                                  :prompt :select})]
                                  (println (str "\n# --- bb autocomplete follows ---\n"
                                                (slurp (str "./bb/" shell-type "_completion.sh")))))}}}
